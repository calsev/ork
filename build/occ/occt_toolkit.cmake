# script for each OCCT toolkit

# parse PACKAGES file
if_file_2_strings("${3P_OCC_SRC_DIR}/src/${PROJECT_NAME}/PACKAGES" USED_PACKAGES)

set(PRECOMPILED_DEFS)

# Get all used packages from toolkit
foreach(OCCT_PACKAGE ${USED_PACKAGES})
	# TKService contains platform-dependent packages: Xw and WNT
	if((WIN32 AND "${OCCT_PACKAGE}" STREQUAL "Xw") OR(NOT WIN32 AND "${OCCT_PACKAGE}" STREQUAL "WNT"))
		# do nothing
	else()
		list(APPEND PRECOMPILED_DEFS "-D__${OCCT_PACKAGE}_DLL")
		
		set(SOURCE_FILES)
		set(HEADER_FILES)
		
		# header files
		file(STRINGS "${3P_OCC_SRC_DIR}/src/${OCCT_PACKAGE}/FILES" HEADER_FILES_M   REGEX ".+[.]h")
		file(STRINGS "${3P_OCC_SRC_DIR}/src/${OCCT_PACKAGE}/FILES" HEADER_FILES_LXX REGEX ".+[.]lxx")
		file(STRINGS "${3P_OCC_SRC_DIR}/src/${OCCT_PACKAGE}/FILES" HEADER_FILES_GXX REGEX ".+[.]gxx")
		file(STRINGS "${3P_OCC_SRC_DIR}/src/${OCCT_PACKAGE}/FILES" SOURCE_FILES_C REGEX ".+[.]c")
		
		list(APPEND HEADER_FILES ${HEADER_FILES_M} ${HEADER_FILES_LXX} ${SOURCE_FILES_GXX})
		list(APPEND SOURCE_FILES ${SOURCE_FILES_C})
		
		foreach(HEADER_FILE ${HEADER_FILES})
			list(APPEND USED_INCFILES "${3P_OCC_SRC_DIR}/src/${OCCT_PACKAGE}/${HEADER_FILE}")
			SOURCE_GROUP("Header Files\\${OCCT_PACKAGE}" FILES "${3P_OCC_SRC_DIR}/src/${OCCT_PACKAGE}/${HEADER_FILE}")
		endforeach()
		
		foreach(SOURCE_FILE ${SOURCE_FILES})
			list(APPEND USED_SRCFILES "${3P_OCC_SRC_DIR}/src/${OCCT_PACKAGE}/${SOURCE_FILE}")
			SOURCE_GROUP("Source Files\\${OCCT_PACKAGE}" FILES "${3P_OCC_SRC_DIR}/src/${OCCT_PACKAGE}/${SOURCE_FILE}")
		endforeach()
	endif()
endforeach()
string(REGEX REPLACE ";" " " PRECOMPILED_DEFS "${PRECOMPILED_DEFS}")

set(CURRENT_MODULE)
foreach(OCCT_MODULE ${ALL_OCC_MODULES})
	list(FIND ${OCCT_MODULE}_TOOLKITS ${PROJECT_NAME} CURRENT_PROJECT_IS_BUILT)
	if(NOT ${CURRENT_PROJECT_IS_BUILT} EQUAL -1)
		set(CURRENT_MODULE ${OCCT_MODULE})
	endif()
endforeach()

add_library(${PROJECT_NAME} ${USED_SRCFILES} ${USED_INCFILES})

install_bin("${PROJECT_NAME}")

if(CURRENT_MODULE)
	set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER "Modules/${CURRENT_MODULE}")
	set_target_properties(${PROJECT_NAME} PROPERTIES MODULE "${CURRENT_MODULE}")
endif()

get_property(OCC_VERSION_MAJOR GLOBAL PROPERTY OCC_VERSION_MAJOR)
get_property(OCC_VERSION_MINOR GLOBAL PROPERTY OCC_VERSION_MINOR)
get_property(OCC_VERSION_MAINTENANCE GLOBAL PROPERTY OCC_VERSION_MAINTENANCE)

set_target_properties(
	${PROJECT_NAME} PROPERTIES COMPILE_FLAGS "${PRECOMPILED_DEFS}"
	SOVERSION     "${OCC_VERSION_MAJOR}"
	VERSION       "${OCC_VERSION_MAJOR}.${OCC_VERSION_MINOR}.${OCC_VERSION_MAINTENANCE}"
)

set(USED_TOOLKITS_BY_CURRENT_PROJECT)
set(USED_EXTERNAL_LIBS_BY_CURRENT_PROJECT)


if_file_2_strings("${3P_OCC_SRC_DIR}/src/${PROJECT_NAME}/EXTERNLIB" USED_EXTERNLIB_AND_TOOLKITS)
foreach(USED_ITEM ${USED_EXTERNLIB_AND_TOOLKITS})
	string(REGEX MATCH "^ *#" COMMENT_FOUND ${USED_ITEM})
	if(NOT COMMENT_FOUND)
		string(REGEX MATCH "^TK" TK_FOUND ${USED_ITEM})
		
		if(NOT "${TK_FOUND}" STREQUAL "")
			list(APPEND USED_TOOLKITS_BY_CURRENT_PROJECT ${USED_ITEM})
		else()
			string(REGEX MATCH "^CSF_" CSF_FOUND ${USED_ITEM})
			if("${CSF_FOUND}" STREQUAL "")
				message(STATUS "Info: ${USED_ITEM} from ${PROJECT_NAME} skipped due to it is empty")
			else() # get CSF_ value
				set(CURRENT_CSF ${${USED_ITEM}})
				if(NOT "${CURRENT_CSF}" STREQUAL "")
					# prepare a list from a string with whitespaces
					separate_arguments(CURRENT_CSF)
					list(APPEND USED_EXTERNAL_LIBS_BY_CURRENT_PROJECT ${CURRENT_CSF})
				endif()
			endif()
		endif()
	endif()
endforeach()

target_link_libraries(${PROJECT_NAME} ${USED_TOOLKITS_BY_CURRENT_PROJECT} ${USED_EXTERNAL_LIBS_BY_CURRENT_PROJECT})
